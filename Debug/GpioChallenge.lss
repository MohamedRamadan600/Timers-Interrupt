
GpioChallenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000900  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000205c  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce9  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000139f  00000000  00000000  0000397d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00004d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056fb  00000000  00000000  00005270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000127d  00000000  00000000  0000a96b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000d55  00000000  00000000  0000be08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	10 c1       	rjmp	.+544    	; 0x22e <__vector_3>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	25 c0       	rjmp	.+74     	; 0x74 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c1       	rjmp	.+696    	; 0x2e6 <__vector_11>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	a2 d0       	rcall	.+324    	; 0x1b6 <main>
  72:	44 c4       	rjmp	.+2184   	; 0x8fc <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <EINT2_Enable>:
#include "extint.h"


void EINT2_Enable(void){
	//GICR|=(1<<BIT5);		//set the INT2 in GICR Register to enable external interrupt module
	GICR|=(1<<5);
  76:	8b b7       	in	r24, 0x3b	; 59
  78:	80 62       	ori	r24, 0x20	; 32
  7a:	8b bf       	out	0x3b, r24	; 59
  7c:	08 95       	ret

0000007e <EINT2_Disable>:

}


void EINT2_Disable(void){
	GICR &=~(1<<BIT5);		//clear the INT2 in GICR Register to disable external interrupt module
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	8b bf       	out	0x3b, r24	; 59
  82:	08 95       	ret

00000084 <EINT2_R_s_Edge>:
}


void EINT2_R_s_Edge(void){
	//MCUCSR|= (1<<BIT6);		//set the ISC2 in MCUCSR Register to set ext as rising edge	
	MCUCSR|= (1<<6);
  84:	84 b7       	in	r24, 0x34	; 52
  86:	80 64       	ori	r24, 0x40	; 64
  88:	84 bf       	out	0x34, r24	; 52
  8a:	08 95       	ret

0000008c <EINT2_Falling_Edge>:
}

void EINT2_Falling_Edge(void){
	MCUCSR &= ~(1<<6);		//clear the ISC2 in MCUCSR Register to set ext as falling edge	
  8c:	84 b7       	in	r24, 0x34	; 52
  8e:	8f 7b       	andi	r24, 0xBF	; 191
  90:	84 bf       	out	0x34, r24	; 52
  92:	08 95       	ret

00000094 <HwPWMInit>:
#include "HwPWM.h"
#include "timers.h"
#include "led.h"


void HwPWMInit(void){
  94:	8f 92       	push	r8
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	//OC0 pin for PWm on timer0
	gpioPinDirection(T0_PWM_GPIO,T0_PWM_BIT,OUTPUT);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	d5 d1       	rcall	.+938    	; 0x458 <gpioPinDirection>
	//OC1A pin for PWm on timer1
	gpioPinDirection(T1A_PWM_GPIO,T1A_PWM_BIT,OUTPUT);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	60 e1       	ldi	r22, 0x10	; 16
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	d1 d1       	rcall	.+930    	; 0x458 <gpioPinDirection>
	//OC1B pin for PWm on timer1
	gpioPinDirection(T1B_PWM_GPIO,T1B_PWM_BIT,OUTPUT);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	60 e2       	ldi	r22, 0x20	; 32
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	cd d1       	rcall	.+922    	; 0x458 <gpioPinDirection>
	//OC2 pin for PWm on timer2
	gpioPinDirection(T2_PWM_GPIO,T2_PWM_BIT,OUTPUT);
  be:	4f ef       	ldi	r20, 0xFF	; 255
  c0:	60 e8       	ldi	r22, 0x80	; 128
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	c9 d1       	rcall	.+914    	; 0x458 <gpioPinDirection>
	//initialize timer1
	timer1Init(T1_FAST_PWM_MODE_ICR1_TOP,T1_OC1A_CLEAR | T1_OC1B_CLEAR,T1_PRESCALER_1024,
  c6:	81 2c       	mov	r8, r1
  c8:	a1 2c       	mov	r10, r1
  ca:	b1 2c       	mov	r11, r1
  cc:	c1 2c       	mov	r12, r1
  ce:	d1 2c       	mov	r13, r1
  d0:	e1 2c       	mov	r14, r1
  d2:	f1 2c       	mov	r15, r1
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	25 e0       	ldi	r18, 0x05	; 5
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 ea       	ldi	r23, 0xA0	; 160
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	6d d1       	rcall	.+730    	; 0x3c4 <timer1Init>
				0,0,0,0,T1_POLLING);
	
	
}
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	ff 90       	pop	r15
  f0:	ef 90       	pop	r14
  f2:	df 90       	pop	r13
  f4:	cf 90       	pop	r12
  f6:	bf 90       	pop	r11
  f8:	af 90       	pop	r10
  fa:	8f 90       	pop	r8
  fc:	08 95       	ret

000000fe <HwPWMSetDuty>:



void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency){
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	18 2f       	mov	r17, r24
	uint8_t value = 0;
	 //calculate the value of the period of PWM signal
	value=(uint8_t)(F_CPU/((2*1024*a_u32_frequency)))-1;
 10e:	9a 01       	movw	r18, r20
 110:	ab 01       	movw	r20, r22
 112:	01 2e       	mov	r0, r17
 114:	1b e0       	ldi	r17, 0x0B	; 11
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	1a 95       	dec	r17
 120:	d1 f7       	brne	.-12     	; 0x116 <HwPWMSetDuty+0x18>
 122:	10 2d       	mov	r17, r0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	74 e2       	ldi	r23, 0x24	; 36
 128:	84 ef       	ldi	r24, 0xF4	; 244
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	b1 d3       	rcall	.+1890   	; 0x890 <__udivmodsi4>
 12e:	21 50       	subi	r18, 0x01	; 1
	ICR1 = value;
 130:	c2 2f       	mov	r28, r18
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	d7 bd       	out	0x27, r29	; 39
 136:	c6 bd       	out	0x26, r28	; 38
	//set duty cycle of the first generated signal
	OCR1A=(uint8_t)value*((float)a_u8_duty/100.0); 
 138:	61 2f       	mov	r22, r17
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	a3 d2       	rcall	.+1350   	; 0x688 <__floatunsisf>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	48 ec       	ldi	r20, 0xC8	; 200
 148:	52 e4       	ldi	r21, 0x42	; 66
 14a:	0a d2       	rcall	.+1044   	; 0x560 <__divsf3>
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
 150:	be 01       	movw	r22, r28
 152:	dd 0f       	add	r29, r29
 154:	88 0b       	sbc	r24, r24
 156:	99 0b       	sbc	r25, r25
 158:	99 d2       	rcall	.+1330   	; 0x68c <__floatsisf>
 15a:	9b 01       	movw	r18, r22
 15c:	ac 01       	movw	r20, r24
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	20 d3       	rcall	.+1600   	; 0x7a4 <__mulsf3>
 164:	65 d2       	rcall	.+1226   	; 0x630 <__fixunssfsi>
 166:	7b bd       	out	0x2b, r23	; 43
 168:	6a bd       	out	0x2a, r22	; 42
	//set duty cycle of the second generated signal
	OCR1B=(uint8_t)value*((float)a_u8_duty/100.0);
 16a:	79 bd       	out	0x29, r23	; 41
 16c:	68 bd       	out	0x28, r22	; 40
	
	
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	cf 90       	pop	r12
 17c:	08 95       	ret

0000017e <Led_Init>:
 * @param led_id: The led to be initialized and it takes
 * 				  one of the enum (En_LedNumber_t) parameters
 *
 */
void Led_Init(En_LedNumber_t en_led_id){
	switch (en_led_id)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	59 f0       	breq	.+22     	; 0x198 <Led_Init+0x1a>
 182:	28 f0       	brcs	.+10     	; 0x18e <Led_Init+0x10>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	69 f0       	breq	.+26     	; 0x1a2 <Led_Init+0x24>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	81 f0       	breq	.+32     	; 0x1ac <Led_Init+0x2e>
 18c:	08 95       	ret
	{
	case LED_0:
			gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	60 e1       	ldi	r22, 0x10	; 16
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	61 c1       	rjmp	.+706    	; 0x458 <gpioPinDirection>
			break;
 196:	08 95       	ret
	case LED_1:
			gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	60 e2       	ldi	r22, 0x20	; 32
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	5c c1       	rjmp	.+696    	; 0x458 <gpioPinDirection>
			break;
 1a0:	08 95       	ret
	case LED_2:
			gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 1a2:	4f ef       	ldi	r20, 0xFF	; 255
 1a4:	60 e4       	ldi	r22, 0x40	; 64
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	57 c1       	rjmp	.+686    	; 0x458 <gpioPinDirection>
			break;
 1aa:	08 95       	ret
	case LED_3:
			gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 1ac:	4f ef       	ldi	r20, 0xFF	; 255
 1ae:	60 e8       	ldi	r22, 0x80	; 128
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	52 c1       	rjmp	.+676    	; 0x458 <gpioPinDirection>
 1b4:	08 95       	ret

000001b6 <main>:
volatile uint16_t distance = 0;

int main (void)
{
	//initialize led 1	
	Led_Init(LED_0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	e2 df       	rcall	.-60     	; 0x17e <Led_Init>
	//initialize led 2
	Led_Init(LED_1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	e0 df       	rcall	.-64     	; 0x17e <Led_Init>
	//initialize led 3
	Led_Init(LED_2);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	de df       	rcall	.-68     	; 0x17e <Led_Init>
	//initialize led 4
	Led_Init(LED_3);
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	dc df       	rcall	.-72     	; 0x17e <Led_Init>
	//initialize Hardware PWM
	HwPWMInit();		
 1c6:	66 df       	rcall	.-308    	; 0x94 <HwPWMInit>
	
	//initialize icu
	SwICU_Init(SwICU_EdgeRisiging);
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	6a d0       	rcall	.+212    	; 0x2a0 <SwICU_Init>
 1cc:	8a d0       	rcall	.+276    	; 0x2e2 <SwICU_Enable>
	//Enable ICU
	SwICU_Enable();
 1ce:	bc d1       	rcall	.+888    	; 0x548 <Ultrasonic_Init>
 1d0:	8f b7       	in	r24, 0x3f	; 63
	//Initialize ultrasonic
	Ultrasonic_Init();
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8f bf       	out	0x3f, r24	; 63
	//setting Global Interrupt
	SREG|=(1<<7);	
 1d6:	e1 2c       	mov	r14, r1
 1d8:	00 e0       	ldi	r16, 0x00	; 0
	//initialize timer2
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_256,0,0,T0_POLLING);	
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	44 e0       	ldi	r20, 0x04	; 4
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	c5 d0       	rcall	.+394    	; 0x36e <timer0Init>
 1e4:	83 e0       	ldi	r24, 0x03	; 3
	//MCUCSR|= (1<<6);	
	SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 1e6:	65 d0       	rcall	.+202    	; 0x2b2 <SwICU_SetCfgEdge>
 1e8:	4a ef       	ldi	r20, 0xFA	; 250
	HwPWMSetDuty(75,250);	
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	8b e4       	ldi	r24, 0x4B	; 75
 1f2:	85 df       	rcall	.-246    	; 0xfe <HwPWMSetDuty>
 1f4:	14 e4       	ldi	r17, 0x44	; 68
while(1){
	
	//start sending trigger signal 
	Ultrasonic_Start();
	//distance = (uint16_t)(0.272*TCNT0);
	 distance = (uint16_t) ((68*((gu_IC_SW)))/1000);
 1f6:	c8 ee       	ldi	r28, 0xE8	; 232
 1f8:	d3 e0       	ldi	r29, 0x03	; 3
 1fa:	a9 d1       	rcall	.+850    	; 0x54e <Ultrasonic_Start>
	SwICU_SetCfgEdge(SwICU_EdgeRisiging);
	HwPWMSetDuty(75,250);	
while(1){
	
	//start sending trigger signal 
	Ultrasonic_Start();
 1fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gu_IC_SW>
	//distance = (uint16_t)(0.272*TCNT0);
	 distance = (uint16_t) ((68*((gu_IC_SW)))/1000);
 200:	18 9f       	mul	r17, r24
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	be 01       	movw	r22, r28
 208:	30 d3       	rcall	.+1632   	; 0x86a <__divmodhi4>
 20a:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <_edata+0x1>
 20e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 212:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 216:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
	 //output the distance on the leds
	 PORTB_DATA |=(distance<<4);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	82 95       	swap	r24
 21e:	92 95       	swap	r25
 220:	90 7f       	andi	r25, 0xF0	; 240
 222:	98 27       	eor	r25, r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	98 27       	eor	r25, r24
 228:	82 2b       	or	r24, r18
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	e6 cf       	rjmp	.-52     	; 0x1fa <main+0x44>

0000022e <__vector_3>:
 22e:	78 94       	sei
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
	}
	
	return 0;
}
	*/
InterruptServiceRoutine(EXTERNAL_INTERRUPT2_vect){
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	/*check if the trigger is rising edge*/
	//Led_On(LED_0);
	if (Edge_Status_Control == SwICU_EdgeRisiging)
 252:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Edge_Status_Control>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	39 f4       	brne	.+14     	; 0x268 <__vector_3+0x3a>
	{
	
		
		//start timer2 counting and prescaling
		timer0Start();
 25a:	a3 d0       	rcall	.+326    	; 0x3a2 <timer0Start>
		//writing falling edge on external interrupt
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	29 d0       	rcall	.+82     	; 0x2b2 <SwICU_SetCfgEdge>
		GIFR &=~(1<<5);	
 260:	8a b7       	in	r24, 0x3a	; 58
 262:	8f 7d       	andi	r24, 0xDF	; 223
 264:	8a bf       	out	0x3a, r24	; 58
 266:	0b c0       	rjmp	.+22     	; 0x27e <__vector_3+0x50>
	}
	else if (Edge_Status_Control == SwICU_EdgeFalling)
 268:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Edge_Status_Control>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	39 f4       	brne	.+14     	; 0x27e <__vector_3+0x50>
	{
		//read the counter value in SwICU_Read function
		SwICU_Read(&gu_IC_SW);
 270:	85 e6       	ldi	r24, 0x65	; 101
 272:	90 e0       	ldi	r25, 0x00	; 0
		//change the scene control to Rising edge on external interrupt
		SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 274:	2e d0       	rcall	.+92     	; 0x2d2 <SwICU_Read>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	1c d0       	rcall	.+56     	; 0x2b2 <SwICU_SetCfgEdge>
		//stop timer2
		timer0Stop();
 27a:	99 d0       	rcall	.+306    	; 0x3ae <timer0Stop>
 27c:	12 be       	out	0x32, r1	; 50
		//reinitialize the counter 0
		TCNT0 = 0;	
 27e:	ff 91       	pop	r31
	}
}
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <SwICU_Init>:
 2a0:	82 30       	cpi	r24, 0x02	; 2
	EINT2_Disable();
}

void SwICU_Start(void){
	//enable int2
	EINT2_Enable();
 2a2:	19 f0       	breq	.+6      	; 0x2aa <SwICU_Init+0xa>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	19 f0       	breq	.+6      	; 0x2ae <SwICU_Init+0xe>
 2a8:	08 95       	ret
 2aa:	f0 ce       	rjmp	.-544    	; 0x8c <EINT2_Falling_Edge>
 2ac:	08 95       	ret
 2ae:	ea ce       	rjmp	.-556    	; 0x84 <EINT2_R_s_Edge>
 2b0:	08 95       	ret

000002b2 <SwICU_SetCfgEdge>:
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
 2b6:	e3 de       	rcall	.-570    	; 0x7e <EINT2_Disable>
 2b8:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <Edge_Status_Control>
 2bc:	c2 30       	cpi	r28, 0x02	; 2
 2be:	19 f0       	breq	.+6      	; 0x2c6 <SwICU_SetCfgEdge+0x14>
 2c0:	c3 30       	cpi	r28, 0x03	; 3
 2c2:	19 f0       	breq	.+6      	; 0x2ca <SwICU_SetCfgEdge+0x18>
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <SwICU_SetCfgEdge+0x1a>
 2c6:	e2 de       	rcall	.-572    	; 0x8c <EINT2_Falling_Edge>
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <SwICU_SetCfgEdge+0x1a>
 2ca:	dc de       	rcall	.-584    	; 0x84 <EINT2_R_s_Edge>
 2cc:	d4 de       	rcall	.-600    	; 0x76 <EINT2_Enable>
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <SwICU_Read>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
 2d8:	62 d0       	rcall	.+196    	; 0x39e <timer0Read>
 2da:	88 83       	st	Y, r24
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <SwICU_Enable>:
}

void SwICU_Enable(void){
	//enable external interrupt 
	EINT2_Enable();	
 2e2:	c9 ce       	rjmp	.-622    	; 0x76 <EINT2_Enable>
 2e4:	08 95       	ret

000002e6 <__vector_11>:
					tick_time = (1*10^9)/base_rate;*/
					
}
//set the timer0			
void timer0Set(uint8_t u8_value){
			      	TCNT0 = u8_value;		      //set the value to start from it
 2e6:	78 94       	sei
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SPWM_Flag>
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SPWM_Flag>
 314:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <PWM1DC>
 318:	89 13       	cpse	r24, r25
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__vector_11+0x46>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	60 e1       	ldi	r22, 0x10	; 16
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	d6 d0       	rcall	.+428    	; 0x4d0 <gpioPinWrite>
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	60 e2       	ldi	r22, 0x20	; 32
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	d2 d0       	rcall	.+420    	; 0x4d0 <gpioPinWrite>
 32c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SPWM_Flag>
 330:	84 36       	cpi	r24, 0x64	; 100
 332:	51 f4       	brne	.+20     	; 0x348 <__vector_11+0x62>
 334:	4f ef       	ldi	r20, 0xFF	; 255
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	ca d0       	rcall	.+404    	; 0x4d0 <gpioPinWrite>
 33c:	4f ef       	ldi	r20, 0xFF	; 255
 33e:	60 e2       	ldi	r22, 0x20	; 32
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	c6 d0       	rcall	.+396    	; 0x4d0 <gpioPinWrite>
 344:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <SPWM_Flag>
 348:	80 eb       	ldi	r24, 0xB0	; 176
 34a:	82 bf       	out	0x32, r24	; 50
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <timer0Init>:
 36e:	ef 92       	push	r14
 370:	0f 93       	push	r16
 372:	93 b7       	in	r25, 0x33	; 51
 374:	90 68       	ori	r25, 0x80	; 128
 376:	93 bf       	out	0x33, r25	; 51
 378:	93 b7       	in	r25, 0x33	; 51
 37a:	89 2b       	or	r24, r25
 37c:	83 bf       	out	0x33, r24	; 51
 37e:	83 b7       	in	r24, 0x33	; 51
 380:	68 2b       	or	r22, r24
 382:	63 bf       	out	0x33, r22	; 51
 384:	22 bf       	out	0x32, r18	; 50
 386:	0c bf       	out	0x3c, r16	; 60
 388:	89 b7       	in	r24, 0x39	; 57
 38a:	e8 2a       	or	r14, r24
 38c:	e9 be       	out	0x39, r14	; 57
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <prescaler_Timer0+0x1>
 394:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <prescaler_Timer0>
 398:	0f 91       	pop	r16
 39a:	ef 90       	pop	r14
 39c:	08 95       	ret

0000039e <timer0Read>:
 39e:	82 b7       	in	r24, 0x32	; 50
 3a0:	08 95       	ret

000003a2 <timer0Start>:
 3a2:	93 b7       	in	r25, 0x33	; 51
 3a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <prescaler_Timer0>
 3a8:	89 2b       	or	r24, r25
 3aa:	83 bf       	out	0x33, r24	; 51
 3ac:	08 95       	ret

000003ae <timer0Stop>:
 3ae:	83 b7       	in	r24, 0x33	; 51
 3b0:	8d 7f       	andi	r24, 0xFD	; 253
 3b2:	83 bf       	out	0x33, r24	; 51
 3b4:	83 b7       	in	r24, 0x33	; 51
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	83 bf       	out	0x33, r24	; 51
 3ba:	83 b7       	in	r24, 0x33	; 51
 3bc:	8f 7e       	andi	r24, 0xEF	; 239
 3be:	83 bf       	out	0x33, r24	; 51
 3c0:	12 be       	out	0x32, r1	; 50
 3c2:	08 95       	ret

000003c4 <timer1Init>:
 * @param interruptMask
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,En_timer1perscaler_t en_prescal,
			    uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,
				uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
				{
 3c4:	8f 92       	push	r8
 3c6:	af 92       	push	r10
 3c8:	bf 92       	push	r11
 3ca:	cf 92       	push	r12
 3cc:	df 92       	push	r13
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
				    TCCR1|=en_mode;
 3de:	ee b5       	in	r30, 0x2e	; 46
 3e0:	ff b5       	in	r31, 0x2f	; 47
 3e2:	8e 2b       	or	r24, r30
 3e4:	9f 2b       	or	r25, r31
 3e6:	9f bd       	out	0x2f, r25	; 47
 3e8:	8e bd       	out	0x2e, r24	; 46
					TCCR1|=en_OC;
 3ea:	8e b5       	in	r24, 0x2e	; 46
 3ec:	9f b5       	in	r25, 0x2f	; 47
 3ee:	68 2b       	or	r22, r24
 3f0:	79 2b       	or	r23, r25
 3f2:	7f bd       	out	0x2f, r23	; 47
 3f4:	6e bd       	out	0x2e, r22	; 46
					TCCR1|=en_prescal;
 3f6:	8e b5       	in	r24, 0x2e	; 46
 3f8:	9f b5       	in	r25, 0x2f	; 47
 3fa:	82 2b       	or	r24, r18
 3fc:	93 2b       	or	r25, r19
 3fe:	9f bd       	out	0x2f, r25	; 47
 400:	8e bd       	out	0x2e, r24	; 46
					TCNT1|=u16_initialValue;
 402:	8c b5       	in	r24, 0x2c	; 44
 404:	9d b5       	in	r25, 0x2d	; 45
 406:	08 2b       	or	r16, r24
 408:	19 2b       	or	r17, r25
 40a:	1d bd       	out	0x2d, r17	; 45
 40c:	0c bd       	out	0x2c, r16	; 44
					OCR1A|=u16_outputCompareA;
 40e:	8a b5       	in	r24, 0x2a	; 42
 410:	9b b5       	in	r25, 0x2b	; 43
 412:	e8 2a       	or	r14, r24
 414:	f9 2a       	or	r15, r25
 416:	fb bc       	out	0x2b, r15	; 43
 418:	ea bc       	out	0x2a, r14	; 42
					OCR1B|=u16_outputCompareB;
 41a:	88 b5       	in	r24, 0x28	; 40
 41c:	99 b5       	in	r25, 0x29	; 41
 41e:	c8 2a       	or	r12, r24
 420:	d9 2a       	or	r13, r25
 422:	d9 bc       	out	0x29, r13	; 41
 424:	c8 bc       	out	0x28, r12	; 40
					ICR1|=u16_inputCapture;
 426:	86 b5       	in	r24, 0x26	; 38
 428:	97 b5       	in	r25, 0x27	; 39
 42a:	a8 2a       	or	r10, r24
 42c:	b9 2a       	or	r11, r25
 42e:	b7 bc       	out	0x27, r11	; 39
 430:	a6 bc       	out	0x26, r10	; 38
					TIMSK|=en_interruptMask;
 432:	89 b7       	in	r24, 0x39	; 57
 434:	88 2a       	or	r8, r24
 436:	89 be       	out	0x39, r8	; 57
					prescaler_Timer1=en_prescal;
 438:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <prescaler_Timer1+0x1>
 43c:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <prescaler_Timer1>
	
				}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	8f 90       	pop	r8
 456:	08 95       	ret

00000458 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
	
		switch (u8_port)
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	99 f0       	breq	.+38     	; 0x482 <gpioPinDirection+0x2a>
 45c:	28 f0       	brcs	.+10     	; 0x468 <gpioPinDirection+0x10>
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	e9 f0       	breq	.+58     	; 0x49c <gpioPinDirection+0x44>
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	41 f1       	breq	.+80     	; 0x4b6 <gpioPinDirection+0x5e>
 466:	08 95       	ret
		{
			case GPIOA:
								if(u8_direction==OUTPUT){
 468:	4f 3f       	cpi	r20, 0xFF	; 255
 46a:	21 f4       	brne	.+8      	; 0x474 <gpioPinDirection+0x1c>
								PORTA_DIR |= u8_pins;
 46c:	8a b3       	in	r24, 0x1a	; 26
 46e:	68 2b       	or	r22, r24
 470:	6a bb       	out	0x1a, r22	; 26
 472:	08 95       	ret
								}else if (u8_direction==INPUT)
 474:	41 11       	cpse	r20, r1
 476:	2b c0       	rjmp	.+86     	; 0x4ce <gpioPinDirection+0x76>
								{
								PORTA_DIR &=~u8_pins;	
 478:	8a b3       	in	r24, 0x1a	; 26
 47a:	60 95       	com	r22
 47c:	68 23       	and	r22, r24
 47e:	6a bb       	out	0x1a, r22	; 26
 480:	08 95       	ret
								}
								break;
			case GPIOB:
								if(u8_direction==OUTPUT){
 482:	4f 3f       	cpi	r20, 0xFF	; 255
 484:	21 f4       	brne	.+8      	; 0x48e <gpioPinDirection+0x36>
									PORTB_DIR |= u8_pins;
 486:	87 b3       	in	r24, 0x17	; 23
 488:	68 2b       	or	r22, r24
 48a:	67 bb       	out	0x17, r22	; 23
 48c:	08 95       	ret
								}else if (u8_direction==INPUT)
 48e:	41 11       	cpse	r20, r1
 490:	1e c0       	rjmp	.+60     	; 0x4ce <gpioPinDirection+0x76>
								{
									PORTB_DIR &=~u8_pins;
 492:	87 b3       	in	r24, 0x17	; 23
 494:	60 95       	com	r22
 496:	68 23       	and	r22, r24
 498:	67 bb       	out	0x17, r22	; 23
 49a:	08 95       	ret
								}
								break;
			case GPIOC:
								if(u8_direction==OUTPUT){
 49c:	4f 3f       	cpi	r20, 0xFF	; 255
 49e:	21 f4       	brne	.+8      	; 0x4a8 <gpioPinDirection+0x50>
									PORTC_DIR |= u8_pins;
 4a0:	84 b3       	in	r24, 0x14	; 20
 4a2:	68 2b       	or	r22, r24
 4a4:	64 bb       	out	0x14, r22	; 20
 4a6:	08 95       	ret
								}else if (u8_direction==INPUT)
 4a8:	41 11       	cpse	r20, r1
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <gpioPinDirection+0x76>
								{
									PORTC_DIR &=~u8_pins;
 4ac:	84 b3       	in	r24, 0x14	; 20
 4ae:	60 95       	com	r22
 4b0:	68 23       	and	r22, r24
 4b2:	64 bb       	out	0x14, r22	; 20
 4b4:	08 95       	ret
								}
								break;
			
			case GPIOD:
								if(u8_direction==OUTPUT){
 4b6:	4f 3f       	cpi	r20, 0xFF	; 255
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <gpioPinDirection+0x6a>
									PORTD_DIR |= u8_pins;
 4ba:	81 b3       	in	r24, 0x11	; 17
 4bc:	68 2b       	or	r22, r24
 4be:	61 bb       	out	0x11, r22	; 17
 4c0:	08 95       	ret
								}else if (u8_direction==INPUT)
 4c2:	41 11       	cpse	r20, r1
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <gpioPinDirection+0x76>
								{
									PORTD_DIR &=~u8_pins;
 4c6:	81 b3       	in	r24, 0x11	; 17
 4c8:	60 95       	com	r22
 4ca:	68 23       	and	r22, r24
 4cc:	61 bb       	out	0x11, r22	; 17
 4ce:	08 95       	ret

000004d0 <gpioPinWrite>:
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
	
				switch (u8_port)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	99 f0       	breq	.+38     	; 0x4fa <gpioPinWrite+0x2a>
 4d4:	28 f0       	brcs	.+10     	; 0x4e0 <gpioPinWrite+0x10>
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	e9 f0       	breq	.+58     	; 0x514 <gpioPinWrite+0x44>
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	41 f1       	breq	.+80     	; 0x52e <gpioPinWrite+0x5e>
 4de:	08 95       	ret
				{
					case GPIOA:
								if(u8_value==HIGH){
 4e0:	4f 3f       	cpi	r20, 0xFF	; 255
 4e2:	21 f4       	brne	.+8      	; 0x4ec <gpioPinWrite+0x1c>
									PORTA_DATA |= u8_pins;
 4e4:	8b b3       	in	r24, 0x1b	; 27
 4e6:	68 2b       	or	r22, r24
 4e8:	6b bb       	out	0x1b, r22	; 27
 4ea:	08 95       	ret
								}else if (u8_value==LOW)
 4ec:	41 11       	cpse	r20, r1
 4ee:	2b c0       	rjmp	.+86     	; 0x546 <gpioPinWrite+0x76>
								{
									PORTA_DATA &=~u8_pins;
 4f0:	8b b3       	in	r24, 0x1b	; 27
 4f2:	60 95       	com	r22
 4f4:	68 23       	and	r22, r24
 4f6:	6b bb       	out	0x1b, r22	; 27
 4f8:	08 95       	ret
								}
								break;
					case GPIOB:
								if(u8_value==HIGH){
 4fa:	4f 3f       	cpi	r20, 0xFF	; 255
 4fc:	21 f4       	brne	.+8      	; 0x506 <gpioPinWrite+0x36>
									PORTB_DATA |= u8_pins;
 4fe:	88 b3       	in	r24, 0x18	; 24
 500:	68 2b       	or	r22, r24
 502:	68 bb       	out	0x18, r22	; 24
 504:	08 95       	ret
								}else if (u8_value==LOW)
 506:	41 11       	cpse	r20, r1
 508:	1e c0       	rjmp	.+60     	; 0x546 <gpioPinWrite+0x76>
								{
									PORTB_DATA &=~u8_pins;
 50a:	88 b3       	in	r24, 0x18	; 24
 50c:	60 95       	com	r22
 50e:	68 23       	and	r22, r24
 510:	68 bb       	out	0x18, r22	; 24
 512:	08 95       	ret
								}
								break;
					case GPIOC:
								if(u8_value==HIGH){
 514:	4f 3f       	cpi	r20, 0xFF	; 255
 516:	21 f4       	brne	.+8      	; 0x520 <gpioPinWrite+0x50>
									PORTC_DATA |= u8_pins;
 518:	85 b3       	in	r24, 0x15	; 21
 51a:	68 2b       	or	r22, r24
 51c:	65 bb       	out	0x15, r22	; 21
 51e:	08 95       	ret
								}else if (u8_value==LOW)
 520:	41 11       	cpse	r20, r1
 522:	11 c0       	rjmp	.+34     	; 0x546 <gpioPinWrite+0x76>
								{
									PORTC_DATA &=~u8_pins;
 524:	85 b3       	in	r24, 0x15	; 21
 526:	60 95       	com	r22
 528:	68 23       	and	r22, r24
 52a:	65 bb       	out	0x15, r22	; 21
 52c:	08 95       	ret
								}
								break;
					
					case GPIOD:
								if(u8_value==HIGH){
 52e:	4f 3f       	cpi	r20, 0xFF	; 255
 530:	21 f4       	brne	.+8      	; 0x53a <gpioPinWrite+0x6a>
									PORTD_DATA |= u8_pins;
 532:	82 b3       	in	r24, 0x12	; 18
 534:	68 2b       	or	r22, r24
 536:	62 bb       	out	0x12, r22	; 18
 538:	08 95       	ret
								}else if (u8_value==LOW)
 53a:	41 11       	cpse	r20, r1
 53c:	04 c0       	rjmp	.+8      	; 0x546 <gpioPinWrite+0x76>
								{
									PORTD_DATA &=~u8_pins;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	60 95       	com	r22
 542:	68 23       	and	r22, r24
 544:	62 bb       	out	0x12, r22	; 18
 546:	08 95       	ret

00000548 <Ultrasonic_Init>:

void Ultrasonic_Init(void){
	
	/*set trigger pin in ultrasonic as output pin*/
	//gpioPinDirection(U_S_Trigger_PORT,U_S_Trigger_PIN,OUTPUT);
	PORTB_DIR|=(1<<3);
 548:	bb 9a       	sbi	0x17, 3	; 23
	/*set echo pin in ultrasonic as input pin __external interrupt2__*/
	//gpioPinDirection(U_S_Echo_PORT,U_S_Echo_PIN,INPUT);
	PORTB_DIR &=~(1<<2);
 54a:	ba 98       	cbi	0x17, 2	; 23
 54c:	08 95       	ret

0000054e <Ultrasonic_Start>:

void Ultrasonic_Start(void){
	
	/*write zero on trigger input pin */
	    //gpioPinWrite(U_S_Trigger_PORT,U_S_Trigger_PIN,LOW);
		PORTB_DATA &=~(1<<3);	
 54e:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	00 c0       	rjmp	.+0      	; 0x552 <Ultrasonic_Start+0x4>
	/* wait for 2 micro second*/
	_delay_us(2);
	/*then write One to trigger pin to send wave at 40 KHZ*/
			//gpioPinWrite(U_S_Trigger_PORT,U_S_Trigger_PIN,HIGH);
		PORTB_DATA |=(1<<3);	
 552:	c3 9a       	sbi	0x18, 3	; 24
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <Ultrasonic_Start+0x8>
 55a:	00 00       	nop
	/*wait again for 10 micro seconds*/
	_delay_us(10);
	/*after sending wave by trigger then write 0 to trigger pin again*/
			//gpioPinWrite(U_S_Trigger_PORT,U_S_Trigger_PIN,LOW);
		PORTB_DATA &=~(1<<3);
 55c:	c3 98       	cbi	0x18, 3	; 24
 55e:	08 95       	ret

00000560 <__divsf3>:
 560:	0c d0       	rcall	.+24     	; 0x57a <__divsf3x>
 562:	e6 c0       	rjmp	.+460    	; 0x730 <__fp_round>
 564:	de d0       	rcall	.+444    	; 0x722 <__fp_pscB>
 566:	40 f0       	brcs	.+16     	; 0x578 <__divsf3+0x18>
 568:	d5 d0       	rcall	.+426    	; 0x714 <__fp_pscA>
 56a:	30 f0       	brcs	.+12     	; 0x578 <__divsf3+0x18>
 56c:	21 f4       	brne	.+8      	; 0x576 <__divsf3+0x16>
 56e:	5f 3f       	cpi	r21, 0xFF	; 255
 570:	19 f0       	breq	.+6      	; 0x578 <__divsf3+0x18>
 572:	c7 c0       	rjmp	.+398    	; 0x702 <__fp_inf>
 574:	51 11       	cpse	r21, r1
 576:	10 c1       	rjmp	.+544    	; 0x798 <__fp_szero>
 578:	ca c0       	rjmp	.+404    	; 0x70e <__fp_nan>

0000057a <__divsf3x>:
 57a:	eb d0       	rcall	.+470    	; 0x752 <__fp_split3>
 57c:	98 f3       	brcs	.-26     	; 0x564 <__divsf3+0x4>

0000057e <__divsf3_pse>:
 57e:	99 23       	and	r25, r25
 580:	c9 f3       	breq	.-14     	; 0x574 <__divsf3+0x14>
 582:	55 23       	and	r21, r21
 584:	b1 f3       	breq	.-20     	; 0x572 <__divsf3+0x12>
 586:	95 1b       	sub	r25, r21
 588:	55 0b       	sbc	r21, r21
 58a:	bb 27       	eor	r27, r27
 58c:	aa 27       	eor	r26, r26
 58e:	62 17       	cp	r22, r18
 590:	73 07       	cpc	r23, r19
 592:	84 07       	cpc	r24, r20
 594:	38 f0       	brcs	.+14     	; 0x5a4 <__divsf3_pse+0x26>
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	5f 4f       	sbci	r21, 0xFF	; 255
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	44 1f       	adc	r20, r20
 5a0:	aa 1f       	adc	r26, r26
 5a2:	a9 f3       	breq	.-22     	; 0x58e <__divsf3_pse+0x10>
 5a4:	33 d0       	rcall	.+102    	; 0x60c <__divsf3_pse+0x8e>
 5a6:	0e 2e       	mov	r0, r30
 5a8:	3a f0       	brmi	.+14     	; 0x5b8 <__divsf3_pse+0x3a>
 5aa:	e0 e8       	ldi	r30, 0x80	; 128
 5ac:	30 d0       	rcall	.+96     	; 0x60e <__divsf3_pse+0x90>
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	50 40       	sbci	r21, 0x00	; 0
 5b2:	e6 95       	lsr	r30
 5b4:	00 1c       	adc	r0, r0
 5b6:	ca f7       	brpl	.-14     	; 0x5aa <__divsf3_pse+0x2c>
 5b8:	29 d0       	rcall	.+82     	; 0x60c <__divsf3_pse+0x8e>
 5ba:	fe 2f       	mov	r31, r30
 5bc:	27 d0       	rcall	.+78     	; 0x60c <__divsf3_pse+0x8e>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	88 1f       	adc	r24, r24
 5c4:	bb 1f       	adc	r27, r27
 5c6:	26 17       	cp	r18, r22
 5c8:	37 07       	cpc	r19, r23
 5ca:	48 07       	cpc	r20, r24
 5cc:	ab 07       	cpc	r26, r27
 5ce:	b0 e8       	ldi	r27, 0x80	; 128
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__divsf3_pse+0x56>
 5d2:	bb 0b       	sbc	r27, r27
 5d4:	80 2d       	mov	r24, r0
 5d6:	bf 01       	movw	r22, r30
 5d8:	ff 27       	eor	r31, r31
 5da:	93 58       	subi	r25, 0x83	; 131
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
 5de:	2a f0       	brmi	.+10     	; 0x5ea <__divsf3_pse+0x6c>
 5e0:	9e 3f       	cpi	r25, 0xFE	; 254
 5e2:	51 05       	cpc	r21, r1
 5e4:	68 f0       	brcs	.+26     	; 0x600 <__divsf3_pse+0x82>
 5e6:	8d c0       	rjmp	.+282    	; 0x702 <__fp_inf>
 5e8:	d7 c0       	rjmp	.+430    	; 0x798 <__fp_szero>
 5ea:	5f 3f       	cpi	r21, 0xFF	; 255
 5ec:	ec f3       	brlt	.-6      	; 0x5e8 <__divsf3_pse+0x6a>
 5ee:	98 3e       	cpi	r25, 0xE8	; 232
 5f0:	dc f3       	brlt	.-10     	; 0x5e8 <__divsf3_pse+0x6a>
 5f2:	86 95       	lsr	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f7 95       	ror	r31
 5fc:	9f 5f       	subi	r25, 0xFF	; 255
 5fe:	c9 f7       	brne	.-14     	; 0x5f2 <__divsf3_pse+0x74>
 600:	88 0f       	add	r24, r24
 602:	91 1d       	adc	r25, r1
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	97 f9       	bld	r25, 7
 60a:	08 95       	ret
 60c:	e1 e0       	ldi	r30, 0x01	; 1
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	bb 1f       	adc	r27, r27
 616:	62 17       	cp	r22, r18
 618:	73 07       	cpc	r23, r19
 61a:	84 07       	cpc	r24, r20
 61c:	ba 07       	cpc	r27, r26
 61e:	20 f0       	brcs	.+8      	; 0x628 <__divsf3_pse+0xaa>
 620:	62 1b       	sub	r22, r18
 622:	73 0b       	sbc	r23, r19
 624:	84 0b       	sbc	r24, r20
 626:	ba 0b       	sbc	r27, r26
 628:	ee 1f       	adc	r30, r30
 62a:	88 f7       	brcc	.-30     	; 0x60e <__divsf3_pse+0x90>
 62c:	e0 95       	com	r30
 62e:	08 95       	ret

00000630 <__fixunssfsi>:
 630:	98 d0       	rcall	.+304    	; 0x762 <__fp_splitA>
 632:	88 f0       	brcs	.+34     	; 0x656 <__fixunssfsi+0x26>
 634:	9f 57       	subi	r25, 0x7F	; 127
 636:	90 f0       	brcs	.+36     	; 0x65c <__fixunssfsi+0x2c>
 638:	b9 2f       	mov	r27, r25
 63a:	99 27       	eor	r25, r25
 63c:	b7 51       	subi	r27, 0x17	; 23
 63e:	a0 f0       	brcs	.+40     	; 0x668 <__fixunssfsi+0x38>
 640:	d1 f0       	breq	.+52     	; 0x676 <__fixunssfsi+0x46>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	1a f0       	brmi	.+6      	; 0x652 <__fixunssfsi+0x22>
 64c:	ba 95       	dec	r27
 64e:	c9 f7       	brne	.-14     	; 0x642 <__fixunssfsi+0x12>
 650:	12 c0       	rjmp	.+36     	; 0x676 <__fixunssfsi+0x46>
 652:	b1 30       	cpi	r27, 0x01	; 1
 654:	81 f0       	breq	.+32     	; 0x676 <__fixunssfsi+0x46>
 656:	9f d0       	rcall	.+318    	; 0x796 <__fp_zero>
 658:	b1 e0       	ldi	r27, 0x01	; 1
 65a:	08 95       	ret
 65c:	9c c0       	rjmp	.+312    	; 0x796 <__fp_zero>
 65e:	67 2f       	mov	r22, r23
 660:	78 2f       	mov	r23, r24
 662:	88 27       	eor	r24, r24
 664:	b8 5f       	subi	r27, 0xF8	; 248
 666:	39 f0       	breq	.+14     	; 0x676 <__fixunssfsi+0x46>
 668:	b9 3f       	cpi	r27, 0xF9	; 249
 66a:	cc f3       	brlt	.-14     	; 0x65e <__fixunssfsi+0x2e>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b3 95       	inc	r27
 674:	d9 f7       	brne	.-10     	; 0x66c <__fixunssfsi+0x3c>
 676:	3e f4       	brtc	.+14     	; 0x686 <__fixunssfsi+0x56>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__floatunsisf>:
 688:	e8 94       	clt
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__floatsisf+0x12>

0000068c <__floatsisf>:
 68c:	97 fb       	bst	r25, 7
 68e:	3e f4       	brtc	.+14     	; 0x69e <__floatsisf+0x12>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	99 23       	and	r25, r25
 6a0:	a9 f0       	breq	.+42     	; 0x6cc <__floatsisf+0x40>
 6a2:	f9 2f       	mov	r31, r25
 6a4:	96 e9       	ldi	r25, 0x96	; 150
 6a6:	bb 27       	eor	r27, r27
 6a8:	93 95       	inc	r25
 6aa:	f6 95       	lsr	r31
 6ac:	87 95       	ror	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f1 11       	cpse	r31, r1
 6b6:	f8 cf       	rjmp	.-16     	; 0x6a8 <__floatsisf+0x1c>
 6b8:	fa f4       	brpl	.+62     	; 0x6f8 <__floatsisf+0x6c>
 6ba:	bb 0f       	add	r27, r27
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__floatsisf+0x36>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	1b c0       	rjmp	.+54     	; 0x6f8 <__floatsisf+0x6c>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <__floatsisf+0x6c>
 6cc:	88 23       	and	r24, r24
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <__floatsisf+0x48>
 6d0:	96 e9       	ldi	r25, 0x96	; 150
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__floatsisf+0x6a>
 6d4:	77 23       	and	r23, r23
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__floatsisf+0x54>
 6d8:	9e e8       	ldi	r25, 0x8E	; 142
 6da:	87 2f       	mov	r24, r23
 6dc:	76 2f       	mov	r23, r22
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__floatsisf+0x5e>
 6e0:	66 23       	and	r22, r22
 6e2:	71 f0       	breq	.+28     	; 0x700 <__floatsisf+0x74>
 6e4:	96 e8       	ldi	r25, 0x86	; 134
 6e6:	86 2f       	mov	r24, r22
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	2a f0       	brmi	.+10     	; 0x6f8 <__floatsisf+0x6c>
 6ee:	9a 95       	dec	r25
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	da f7       	brpl	.-10     	; 0x6ee <__floatsisf+0x62>
 6f8:	88 0f       	add	r24, r24
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_inf>:
 702:	97 f9       	bld	r25, 7
 704:	9f 67       	ori	r25, 0x7F	; 127
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	08 95       	ret

0000070e <__fp_nan>:
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	80 ec       	ldi	r24, 0xC0	; 192
 712:	08 95       	ret

00000714 <__fp_pscA>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	09 06       	cpc	r0, r25
 720:	08 95       	ret

00000722 <__fp_pscB>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	05 06       	cpc	r0, r21
 72e:	08 95       	ret

00000730 <__fp_round>:
 730:	09 2e       	mov	r0, r25
 732:	03 94       	inc	r0
 734:	00 0c       	add	r0, r0
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0xc>
 738:	88 23       	and	r24, r24
 73a:	52 f0       	brmi	.+20     	; 0x750 <__fp_round+0x20>
 73c:	bb 0f       	add	r27, r27
 73e:	40 f4       	brcc	.+16     	; 0x750 <__fp_round+0x20>
 740:	bf 2b       	or	r27, r31
 742:	11 f4       	brne	.+4      	; 0x748 <__fp_round+0x18>
 744:	60 ff       	sbrs	r22, 0
 746:	04 c0       	rjmp	.+8      	; 0x750 <__fp_round+0x20>
 748:	6f 5f       	subi	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__fp_split3>:
 752:	57 fd       	sbrc	r21, 7
 754:	90 58       	subi	r25, 0x80	; 128
 756:	44 0f       	add	r20, r20
 758:	55 1f       	adc	r21, r21
 75a:	59 f0       	breq	.+22     	; 0x772 <__fp_splitA+0x10>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	71 f0       	breq	.+28     	; 0x77c <__fp_splitA+0x1a>
 760:	47 95       	ror	r20

00000762 <__fp_splitA>:
 762:	88 0f       	add	r24, r24
 764:	97 fb       	bst	r25, 7
 766:	99 1f       	adc	r25, r25
 768:	61 f0       	breq	.+24     	; 0x782 <__fp_splitA+0x20>
 76a:	9f 3f       	cpi	r25, 0xFF	; 255
 76c:	79 f0       	breq	.+30     	; 0x78c <__fp_splitA+0x2a>
 76e:	87 95       	ror	r24
 770:	08 95       	ret
 772:	12 16       	cp	r1, r18
 774:	13 06       	cpc	r1, r19
 776:	14 06       	cpc	r1, r20
 778:	55 1f       	adc	r21, r21
 77a:	f2 cf       	rjmp	.-28     	; 0x760 <__fp_split3+0xe>
 77c:	46 95       	lsr	r20
 77e:	f1 df       	rcall	.-30     	; 0x762 <__fp_splitA>
 780:	08 c0       	rjmp	.+16     	; 0x792 <__fp_splitA+0x30>
 782:	16 16       	cp	r1, r22
 784:	17 06       	cpc	r1, r23
 786:	18 06       	cpc	r1, r24
 788:	99 1f       	adc	r25, r25
 78a:	f1 cf       	rjmp	.-30     	; 0x76e <__fp_splitA+0xc>
 78c:	86 95       	lsr	r24
 78e:	71 05       	cpc	r23, r1
 790:	61 05       	cpc	r22, r1
 792:	08 94       	sec
 794:	08 95       	ret

00000796 <__fp_zero>:
 796:	e8 94       	clt

00000798 <__fp_szero>:
 798:	bb 27       	eor	r27, r27
 79a:	66 27       	eor	r22, r22
 79c:	77 27       	eor	r23, r23
 79e:	cb 01       	movw	r24, r22
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <__mulsf3>:
 7a4:	0b d0       	rcall	.+22     	; 0x7bc <__mulsf3x>
 7a6:	c4 cf       	rjmp	.-120    	; 0x730 <__fp_round>
 7a8:	b5 df       	rcall	.-150    	; 0x714 <__fp_pscA>
 7aa:	28 f0       	brcs	.+10     	; 0x7b6 <__mulsf3+0x12>
 7ac:	ba df       	rcall	.-140    	; 0x722 <__fp_pscB>
 7ae:	18 f0       	brcs	.+6      	; 0x7b6 <__mulsf3+0x12>
 7b0:	95 23       	and	r25, r21
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__mulsf3+0x12>
 7b4:	a6 cf       	rjmp	.-180    	; 0x702 <__fp_inf>
 7b6:	ab cf       	rjmp	.-170    	; 0x70e <__fp_nan>
 7b8:	11 24       	eor	r1, r1
 7ba:	ee cf       	rjmp	.-36     	; 0x798 <__fp_szero>

000007bc <__mulsf3x>:
 7bc:	ca df       	rcall	.-108    	; 0x752 <__fp_split3>
 7be:	a0 f3       	brcs	.-24     	; 0x7a8 <__mulsf3+0x4>

000007c0 <__mulsf3_pse>:
 7c0:	95 9f       	mul	r25, r21
 7c2:	d1 f3       	breq	.-12     	; 0x7b8 <__mulsf3+0x14>
 7c4:	95 0f       	add	r25, r21
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	55 1f       	adc	r21, r21
 7ca:	62 9f       	mul	r22, r18
 7cc:	f0 01       	movw	r30, r0
 7ce:	72 9f       	mul	r23, r18
 7d0:	bb 27       	eor	r27, r27
 7d2:	f0 0d       	add	r31, r0
 7d4:	b1 1d       	adc	r27, r1
 7d6:	63 9f       	mul	r22, r19
 7d8:	aa 27       	eor	r26, r26
 7da:	f0 0d       	add	r31, r0
 7dc:	b1 1d       	adc	r27, r1
 7de:	aa 1f       	adc	r26, r26
 7e0:	64 9f       	mul	r22, r20
 7e2:	66 27       	eor	r22, r22
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	66 1f       	adc	r22, r22
 7ea:	82 9f       	mul	r24, r18
 7ec:	22 27       	eor	r18, r18
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 9f       	mul	r23, r19
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	62 1f       	adc	r22, r18
 7fc:	83 9f       	mul	r24, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	22 1f       	adc	r18, r18
 804:	74 9f       	mul	r23, r20
 806:	33 27       	eor	r19, r19
 808:	a0 0d       	add	r26, r0
 80a:	61 1d       	adc	r22, r1
 80c:	23 1f       	adc	r18, r19
 80e:	84 9f       	mul	r24, r20
 810:	60 0d       	add	r22, r0
 812:	21 1d       	adc	r18, r1
 814:	82 2f       	mov	r24, r18
 816:	76 2f       	mov	r23, r22
 818:	6a 2f       	mov	r22, r26
 81a:	11 24       	eor	r1, r1
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	8a f0       	brmi	.+34     	; 0x844 <__mulsf3_pse+0x84>
 822:	e1 f0       	breq	.+56     	; 0x85c <__mulsf3_pse+0x9c>
 824:	88 23       	and	r24, r24
 826:	4a f0       	brmi	.+18     	; 0x83a <__mulsf3_pse+0x7a>
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	91 50       	subi	r25, 0x01	; 1
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	a9 f7       	brne	.-22     	; 0x824 <__mulsf3_pse+0x64>
 83a:	9e 3f       	cpi	r25, 0xFE	; 254
 83c:	51 05       	cpc	r21, r1
 83e:	70 f0       	brcs	.+28     	; 0x85c <__mulsf3_pse+0x9c>
 840:	60 cf       	rjmp	.-320    	; 0x702 <__fp_inf>
 842:	aa cf       	rjmp	.-172    	; 0x798 <__fp_szero>
 844:	5f 3f       	cpi	r21, 0xFF	; 255
 846:	ec f3       	brlt	.-6      	; 0x842 <__mulsf3_pse+0x82>
 848:	98 3e       	cpi	r25, 0xE8	; 232
 84a:	dc f3       	brlt	.-10     	; 0x842 <__mulsf3_pse+0x82>
 84c:	86 95       	lsr	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b7 95       	ror	r27
 854:	f7 95       	ror	r31
 856:	e7 95       	ror	r30
 858:	9f 5f       	subi	r25, 0xFF	; 255
 85a:	c1 f7       	brne	.-16     	; 0x84c <__mulsf3_pse+0x8c>
 85c:	fe 2b       	or	r31, r30
 85e:	88 0f       	add	r24, r24
 860:	91 1d       	adc	r25, r1
 862:	96 95       	lsr	r25
 864:	87 95       	ror	r24
 866:	97 f9       	bld	r25, 7
 868:	08 95       	ret

0000086a <__divmodhi4>:
 86a:	97 fb       	bst	r25, 7
 86c:	07 2e       	mov	r0, r23
 86e:	16 f4       	brtc	.+4      	; 0x874 <__divmodhi4+0xa>
 870:	00 94       	com	r0
 872:	06 d0       	rcall	.+12     	; 0x880 <__divmodhi4_neg1>
 874:	77 fd       	sbrc	r23, 7
 876:	08 d0       	rcall	.+16     	; 0x888 <__divmodhi4_neg2>
 878:	2d d0       	rcall	.+90     	; 0x8d4 <__udivmodhi4>
 87a:	07 fc       	sbrc	r0, 7
 87c:	05 d0       	rcall	.+10     	; 0x888 <__divmodhi4_neg2>
 87e:	3e f4       	brtc	.+14     	; 0x88e <__divmodhi4_exit>

00000880 <__divmodhi4_neg1>:
 880:	90 95       	com	r25
 882:	81 95       	neg	r24
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	08 95       	ret

00000888 <__divmodhi4_neg2>:
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255

0000088e <__divmodhi4_exit>:
 88e:	08 95       	ret

00000890 <__udivmodsi4>:
 890:	a1 e2       	ldi	r26, 0x21	; 33
 892:	1a 2e       	mov	r1, r26
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	fd 01       	movw	r30, r26
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__udivmodsi4_ep>

0000089c <__udivmodsi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	ee 1f       	adc	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	a2 17       	cp	r26, r18
 8a6:	b3 07       	cpc	r27, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__udivmodsi4_ep>
 8ae:	a2 1b       	sub	r26, r18
 8b0:	b3 0b       	sbc	r27, r19
 8b2:	e4 0b       	sbc	r30, r20
 8b4:	f5 0b       	sbc	r31, r21

000008b6 <__udivmodsi4_ep>:
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	1a 94       	dec	r1
 8c0:	69 f7       	brne	.-38     	; 0x89c <__udivmodsi4_loop>
 8c2:	60 95       	com	r22
 8c4:	70 95       	com	r23
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	bd 01       	movw	r22, r26
 8d0:	cf 01       	movw	r24, r30
 8d2:	08 95       	ret

000008d4 <__udivmodhi4>:
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	51 e1       	ldi	r21, 0x11	; 17
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <__udivmodhi4_ep>

000008dc <__udivmodhi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	a6 17       	cp	r26, r22
 8e2:	b7 07       	cpc	r27, r23
 8e4:	10 f0       	brcs	.+4      	; 0x8ea <__udivmodhi4_ep>
 8e6:	a6 1b       	sub	r26, r22
 8e8:	b7 0b       	sbc	r27, r23

000008ea <__udivmodhi4_ep>:
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	5a 95       	dec	r21
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__udivmodhi4_loop>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	bc 01       	movw	r22, r24
 8f8:	cd 01       	movw	r24, r26
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
